# -*- coding: utf-8 -*-
import pyodbc
import schedule
import time
import json
import random
import urllib2
import logging
import logging.config



###Logging
#logging.basicConfig(filename='logging.log',level=logging.DEBUG, format='%(asctime)s %(message)s', datefmt='%d/%m/%Y %I:%M:%S %p')
#logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
#logging.debug('This message should go to the log file')
#logging.info('So should this')
#logging.warning('And this, too')

logging.config.fileConfig('config/logging.cfg') #logfile config

##SQL Server
dsn = 'larachdatasource'
user = 'odoosync'
password = 'ODOOadmin'
database = 'OdooSync'

class schedule():
	_name = 'schedule'
	




	def json_rpc(url, method, params):
	    data = {
		"jsonrpc": "2.0",
		"method": method,
		"params": params,
		"id": random.randint(0, 1000000000),
	    }
	    req = urllib2.Request(url=url, data=json.dumps(data), headers={
		"Content-Type":"application/json",
	    })
	    reply = json.load(urllib2.urlopen(req))
	    if reply.get("error"):
		raise Exception(reply["error"])
	    return reply["result"]

	def call(url, service, method, *args):
	    return json_rpc(url, "call", {"service": service, "method": method, "args": args})


	def __init__():
	##Odoo
		HOST = 'localhost'
		PORT = '8069'
		DB = 'larach'
		USER = 'admin'
		PASS = 'l@r@ch'
		# log in the given database
		url = "http://%s:%s/jsonrpc" % (HOST, PORT)
		uid = call(url, "common", "login", DB, USER, PASS)

	def search(obj, arg):
		result = call(url, "object", "execute", DB, uid, PASS, obj, 'search', args)
		return result

	######################################################################
	#############		Loggin in Odoo 
	######################################################################
	def Log(message, description):
		args = {'log': message, 'description': description, }
		call(url, "object", "execute", DB, uid, PASS, 'sap_integration.log', 'create', args)


	def ProcesaVendedores(cnxn):
		print('Buscando vendedores')
		cursor = cnxn.cursor()
		cursor.execute('SELECT SlpCode, SlpName FROM OSLP with (nolock) where isnull(odoo_id,0) = 0')
		for row in cursor:
			#
			print 'Procesando el vendedor ', row.SlpName
			search
			args = {
				'name' : row.SlpName,
			}
			newCustomer(args)
			print 'fin ', row.SlpName
		
	######################################################################
	#############Payment Method 
	######################################################################
	def PaymentMethod(cnxn):
		Log('Buscando metodos de pago', '')
		cursor = cnxn.cursor()
		cursor.execute('exec getPaymentMethod ')
		rows = cursor.fetchall()
	
		for row in rows:
			#
			Log('Procesando metodo %s' % row.PymntGroup, '')
			args = [('sap_id', '=', row.GroupNum)]
			x = call(url, "object", "execute", DB, uid, PASS, 'account.payment.term', 'search', args)
			Log('Odoo Id', x)

			args = {'sap_id': row.GroupNum, 'name': row.PymntGroup, 'note': row.PymntGroup, }
			if x == []: # Nuevo regisro
				Log('Creando registro en Odoo',args)
				odooId = call(url, "object", "execute", DB, uid, PASS, 'account.payment.term', 'create', args)
				cursor.execute('update OCTG set odoo_id = %s where GroupNum = %s' % (odooId, row.GroupNum)) 
				cnxn.commit()
				Log('Registro actualizado en el orígen', '')
			
			else:		# Registro existente
				Log('Actualizando registro en Odoo',args)
				odooId = call(url, "object", "execute", DB, uid, PASS, 'account.payment.term', 'write', x, args)	
				cursor.execute('update OCTG set odoo_id = %s where GroupNum = %s' % (x[0], row.GroupNum)) 
				cnxn.commit()
				Log('Registro actualizado en el orígen', '')
			







	def SearchNewData():
		con_string = 'DSN=%s;UID=%s;PWD=%s;DATABASE=%s;' % (dsn, user, password, database)
		Log('Conectando al orígen', '')
	

		try:
			#############################################################################3##Revisar si se puede hacer una sola conección
			cnxn = pyodbc.connect(con_string)
			Log('Conectado al orígen', '')
			Series(cnxn)
			#########ProcesaVendedores(cnxn)
			CustomerCategories(cnxn)
			PaymentMethod(cnxn)
			###Customers(cnxn) #using the next
			cust(cnxn)		
			Warehouses(cnxn)
		
			###		
			#ProductCategory(cnxn)
			#ProductMaker(cnxn)
			#ProductUoMCategory(cnxn)
			#ProductUoM(cnxn)
			Items(cnxn)
			#PriceList(cnxn)
			#PriceListVersion(cnxn)
			#PriceListDiscounts(cnxn)

			BarCode(cnxn)

		except pyodbc.Error as e:
	    		print e
			logging.warning(e)
			Log('Error de conección', e)
			pass
		#finally:
		#	print 'cierre inesperado'




#schedule.every(5).seconds.do(SearchNewData)


#while True:
#	schedule.run_pending()
#	time.sleep(1)



